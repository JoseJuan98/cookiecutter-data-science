[tox]
requires =
    tox>=4
envlist = py{38,39,310,311}, flake8, mypy
isolated_build = true

[testenv]
skip_install = true
setenv =
    PYTHONPATH = {toxinidir}
deps =
{%- if cookiecutter.project_kind == "data science" -%}
    -r requirements/core.txt
    -r requirements/test.txt
{%- elif cookiecutter.project_kind == "python library" -%}
    .[test]
{% endif %}
# {posargs} ca be passed in by additional arguments specified when invoking tox
# e.g. `tox -- -s` will pass the argument `-s`
# IGNORE_COVERAGE variable to ignore the coverage check by passing
# export IGNORE_COVERAGE=- ; python -m tox -e py310 ; unset IGNORE_COVERAGE
commands =
    python -I -m pytest test/ --cov=neural_networks --basetemp={envtmpdir} {posargs}
    {env:IGNORE_COVERAGE:} python -I -m  coverage report -i --fail-under=90

[testenv:flake8]
skip_install = true
basepython = python3.10
deps = flake8
commands = python -I -m flake8 {posargs:src test}

[testenv:mypy]
skip_install = true
basepython = python3.10
deps = mypy
commands = python -I -m mypy {posargs:src test}

[twine]
# https://packaging.python.org/guides/making-a-pypi-friendly-readme/#validating-restructuredtext-markup
skip_install = true
deps =
{%- if cookiecutter.project_kind == "data science" -%}
    -r requirements/build.txt
{%- elif cookiecutter.project_kind == "python library" -%}
    .[build]
{% endif %}
commands =
    python -I -m pip install --exists-action=w .[build]
    python -I setup.py bdist_wheel
    python -I -m twine check dist/*.whl

[testenv:collect-tests]
# this needs to succeed for tests to display in some IDEs
skip_install = true
commands =
    python -I -m pytest --collect-only

[testenv:clean]
skip_install = true
deps = coverage
allowlist_externals = rm
commands =
    python -I -m coverage erase
    rm -f .coverage.*
    rm -f test-results.xml
    rm -f coverage.xml

[testenv:report]
skip_install = true
deps = coverage
commands =
    python -I -m coverage report